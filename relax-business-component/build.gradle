if (relaxBusinessComponent_isApp.toBoolean()){
    apply plugin: 'com.android.application'
}else{
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            if (relaxBusinessComponent_isApp.toBoolean()) {
                manifest.srcFile 'src/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/release/AndroidManifest.xml'
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

gradle.taskGraph.whenReady {
    tasks.each { task ->
        if (task.name.equals('mockableAndroidJar')) {
            task.enabled = false
        }
    }
}

dependencies {
    def dependencies = rootProject.ext.commonDependencies
    def testDependencies = rootProject.ext.commonTestDependencies
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation dependencies.appcompatV7
    implementation testDependencies.junit
    implementation testDependencies.espressoCore
    implementation testDependencies.runner
    api project(':relax-data-componet')
    implementation project(':BusinessFactory:factoryinterface')
    if (glideEnable.toBoolean()) {
        implementation project(':BusinessFactory:glidebusiness')
    }
    debugImplementation dependencies.debugleakCanary
    releaseImplementation dependencies.releaseleakCanary
}
